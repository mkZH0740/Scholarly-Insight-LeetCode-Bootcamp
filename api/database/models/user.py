from api.database import db
from typing import Optional, List
from sqlalchemy import Integer, String, Text
from sqlalchemy.orm import Mapped, mapped_column, relationship

from .field import Field, user_subscription_table
from .query_history import QueryHistory
from .browse_history import BrowseHistory
from .message import Message
from .channel import Channel


class User(db.Model):
    __tablename__ = "user_table"
    id: Mapped[int] = mapped_column(Integer, primary_key=True)

    # actual user id generated by firebase
    user_id: Mapped[str] = mapped_column(String(128), unique=True)
    # user name
    name: Mapped[str] = mapped_column(String(64))
    # user email
    email: Mapped[str] = mapped_column(String(255))
    # optional profile picture url
    profile_picture_url: Mapped[Optional[str]] = mapped_column(Text)

    # back populated fields, lazy evaluation
    subscribed_fields: Mapped[List["Field"]] = relationship(
        secondary=user_subscription_table,
        back_populates="subscribed_by",
    )
    query_histories: Mapped[List["QueryHistory"]] = relationship(
        back_populates="queried_by",
        cascade="all, delete",
        passive_deletes=True,
    )
    browse_histories: Mapped[List["BrowseHistory"]] = relationship(
        back_populates="browsed_by",
        cascade="all, delete",
        passive_deletes=True,
    )
    sent_messages: Mapped[List["Message"]] = relationship(
        back_populates="sent_by", cascade="all, delete", passive_deletes=True
    )
    created_channels: Mapped[List["Channel"]] = relationship(
        back_populates="created_by"
    )
    owned_channels: Mapped[List["Channel"]] = relationship(
        back_populates="owned_by",
        cascade="all, delete",
        passive_deletes=True,
    )
